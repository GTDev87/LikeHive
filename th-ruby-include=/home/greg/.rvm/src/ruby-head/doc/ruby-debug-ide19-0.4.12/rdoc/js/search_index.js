var search_data = {"index":{"searchIndex":["debugger","context","eventprocessor","inspectcommand","jumpcommand","kernel","loadcommand","parsefunctions","pausecommand","settypecommand","tcpsocket","at_breakpoint()","at_catchpoint()","at_line()","at_line?()","at_return()","at_tracing()","binding_n()","clear_references()","debug_program()","debugger()","execute()","execute()","execute()","execute()","execute()","get_int()","help()","help()","help()","help_command()","help_command()","help_command()","interrupt()","interrupt()","interrupt_last()","line_event()","new()","non_blocking_gets()","numeric?()","print_debug()","reference_result()","regexp()","regexp()","regexp()","regexp()","regexp()","run_prog_script()","start_control()","start_server()","syntax_valid?()","without_stderr()"],"longSearchIndex":["debugger","debugger::context","debugger::eventprocessor","debugger::inspectcommand","debugger::jumpcommand","debugger::kernel","debugger::loadcommand","debugger::parsefunctions","debugger::pausecommand","debugger::settypecommand","tcpsocket","debugger::eventprocessor#at_breakpoint()","debugger::eventprocessor#at_catchpoint()","debugger::eventprocessor#at_line()","debugger::eventprocessor#at_line?()","debugger::eventprocessor#at_return()","debugger::eventprocessor#at_tracing()","debugger::kernel#binding_n()","debugger::inspectcommand::clear_references()","debugger::debug_program()","debugger::kernel#debugger()","debugger::inspectcommand#execute()","debugger::jumpcommand#execute()","debugger::loadcommand#execute()","debugger::pausecommand#execute()","debugger::settypecommand#execute()","debugger::parsefunctions#get_int()","debugger::jumpcommand::help()","debugger::pausecommand::help()","debugger::settypecommand::help()","debugger::jumpcommand::help_command()","debugger::pausecommand::help_command()","debugger::settypecommand::help_command()","debugger::interrupt()","debugger::context#interrupt()","debugger::interrupt_last()","debugger::eventprocessor#line_event()","debugger::eventprocessor::new()","tcpsocket#non_blocking_gets()","debugger::jumpcommand#numeric?()","debugger::print_debug()","debugger::inspectcommand::reference_result()","debugger::inspectcommand#regexp()","debugger::jumpcommand#regexp()","debugger::loadcommand#regexp()","debugger::pausecommand#regexp()","debugger::settypecommand#regexp()","debugger::run_prog_script()","debugger::start_control()","debugger::start_server()","debugger::parsefunctions#syntax_valid?()","debugger::without_stderr()"],"info":[["Debugger","","Debugger.html","",""],["Debugger::Context","","Debugger/Context.html","",""],["Debugger::EventProcessor","","Debugger/EventProcessor.html","",""],["Debugger::InspectCommand","","Debugger/InspectCommand.html","",""],["Debugger::JumpCommand","","Debugger/JumpCommand.html","","<p>Implements debugger “jump” command\n"],["Debugger::Kernel","","Debugger/Kernel.html","",""],["Debugger::LoadCommand","","Debugger/LoadCommand.html","",""],["Debugger::ParseFunctions","","Debugger/ParseFunctions.html","",""],["Debugger::PauseCommand","","Debugger/PauseCommand.html","","<p>Implements debugger “pause” command\n"],["Debugger::SetTypeCommand","","Debugger/SetTypeCommand.html","","<p>Implements debugger “set_type” command\n"],["TCPSocket","","TCPSocket.html","",""],["at_breakpoint","Debugger::EventProcessor","Debugger/EventProcessor.html#method-i-at_breakpoint","(context, breakpoint)",""],["at_catchpoint","Debugger::EventProcessor","Debugger/EventProcessor.html#method-i-at_catchpoint","(context, excpt)",""],["at_line","Debugger::EventProcessor","Debugger/EventProcessor.html#method-i-at_line","(context, file, line)",""],["at_line?","Debugger::EventProcessor","Debugger/EventProcessor.html#method-i-at_line-3F","()",""],["at_return","Debugger::EventProcessor","Debugger/EventProcessor.html#method-i-at_return","(context, file, line)",""],["at_tracing","Debugger::EventProcessor","Debugger/EventProcessor.html#method-i-at_tracing","(context, file, line)",""],["binding_n","Debugger::Kernel","Debugger/Kernel.html#method-i-binding_n","(n = 0)","<p>Returns a binding of n-th call frame\n"],["clear_references","Debugger::InspectCommand","Debugger/InspectCommand.html#method-c-clear_references","()",""],["debug_program","Debugger","Debugger.html#method-c-debug_program","(options)",""],["debugger","Debugger::Kernel","Debugger/Kernel.html#method-i-debugger","(steps = 1)","<p>Stops the current thread after a number of <em>steps</em> made.\n"],["execute","Debugger::InspectCommand","Debugger/InspectCommand.html#method-i-execute","()",""],["execute","Debugger::JumpCommand","Debugger/JumpCommand.html#method-i-execute","()",""],["execute","Debugger::LoadCommand","Debugger/LoadCommand.html#method-i-execute","()",""],["execute","Debugger::PauseCommand","Debugger/PauseCommand.html#method-i-execute","()",""],["execute","Debugger::SetTypeCommand","Debugger/SetTypeCommand.html#method-i-execute","()",""],["get_int","Debugger::ParseFunctions","Debugger/ParseFunctions.html#method-i-get_int","(str, cmd, min=nil, max=nil, default=1)","<p>Parse ‘str’ of command ‘cmd’ as an integer between min and max. If either\nmin or max is nil, that value …\n"],["help","Debugger::JumpCommand","Debugger/JumpCommand.html#method-c-help","(cmd)",""],["help","Debugger::PauseCommand","Debugger/PauseCommand.html#method-c-help","(cmd)",""],["help","Debugger::SetTypeCommand","Debugger/SetTypeCommand.html#method-c-help","(cmd)",""],["help_command","Debugger::JumpCommand","Debugger/JumpCommand.html#method-c-help_command","()",""],["help_command","Debugger::PauseCommand","Debugger/PauseCommand.html#method-c-help_command","()",""],["help_command","Debugger::SetTypeCommand","Debugger/SetTypeCommand.html#method-c-help_command","()",""],["interrupt","Debugger","Debugger.html#method-c-interrupt","()","<p>Interrupts the current thread\n"],["interrupt","Debugger::Context","Debugger/Context.html#method-i-interrupt","()",""],["interrupt_last","Debugger","Debugger.html#method-c-interrupt_last","()","<p>Interrupts the last debugged thread\n"],["line_event","Debugger::EventProcessor","Debugger/EventProcessor.html#method-i-line_event","(context, file, line)",""],["new","Debugger::EventProcessor","Debugger/EventProcessor.html#method-c-new","(interface)",""],["non_blocking_gets","TCPSocket","TCPSocket.html#method-i-non_blocking_gets","()","<p>Workaround for JRuby issue jira.codehaus.org/browse/JRUBY-2063\n"],["numeric?","Debugger::JumpCommand","Debugger/JumpCommand.html#method-i-numeric-3F","(object)",""],["print_debug","Debugger","Debugger.html#method-c-print_debug","(*args)","<p>Prints to the stderr using printf(*args) if debug logging flag (-d) is on.\n"],["reference_result","Debugger::InspectCommand","Debugger/InspectCommand.html#method-c-reference_result","(result)",""],["regexp","Debugger::InspectCommand","Debugger/InspectCommand.html#method-i-regexp","()",""],["regexp","Debugger::JumpCommand","Debugger/JumpCommand.html#method-i-regexp","()",""],["regexp","Debugger::LoadCommand","Debugger/LoadCommand.html#method-i-regexp","()",""],["regexp","Debugger::PauseCommand","Debugger/PauseCommand.html#method-i-regexp","()",""],["regexp","Debugger::SetTypeCommand","Debugger/SetTypeCommand.html#method-i-regexp","()",""],["run_prog_script","Debugger","Debugger.html#method-c-run_prog_script","()",""],["start_control","Debugger","Debugger.html#method-c-start_control","(host, port)",""],["start_server","Debugger","Debugger.html#method-c-start_server","(host = nil, port = 1234)",""],["syntax_valid?","Debugger::ParseFunctions","Debugger/ParseFunctions.html#method-i-syntax_valid-3F","(code)","<p>Return true if code is syntactically correct for Ruby.\n"],["without_stderr","Debugger","Debugger.html#method-c-without_stderr","()",""]]}}